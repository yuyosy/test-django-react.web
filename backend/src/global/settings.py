"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# `project-name/src/`
BASE_DIR = Path(__file__).resolve().parent.parent
print(BASE_DIR)

# Initialize environment variables with DJANGO_APP_ prefix
env = environ.Env(
    DJANGO_APP_DEBUG=(bool, True),
    DJANGO_APP_ENV_FILE=(str, ""),
    DJANGO_APP_MODE=(str, "development"),
    DJANGO_APP_SECRET_KEY=(str, "django-insecure-default-key"),
    DJANGO_APP_ALLOWED_HOSTS=(list, []),
    DJANGO_APP_DATABASE_ENGINE=(str, "django.db.backends.postgresql"),
    DJANGO_APP_DATABASE_NAME=(str, "postgres"),
    DJANGO_APP_DATABASE_USER=(str, ""),
    DJANGO_APP_DATABASE_PASSWORD=(str, ""),
    DJANGO_APP_DATABASE_HOST=(str, "localhost"),
    DJANGO_APP_DATABASE_PORT=(int, 5432),
    DJANGO_CONN_MAX_AGE=(int, 60),
    DJANGO_APP_VITE_DEV_SERVER_PORT=(int, 5173),
)

environ.Env.read_env(".env")

# Check if ENV_FILE is defined and load it if present
if env("DJANGO_APP_ENV_FILE"):
    environ.Env.read_env(env("DJANGO_APP_ENV_FILE"))

# Set the default environment variable for the app mode
APP_MODE = env("DJANGO_APP_MODE")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_APP_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DJANGO_APP_DEBUG")

ALLOWED_HOSTS = env.list("DJANGO_APP_ALLOWED_HOSTS")


# Application definition

INSTALLED_APPS = [
    # Django default apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "rules.apps.AutodiscoverRulesConfig",
    "allauth",
    "allauth.account",
    "allauth.headless",
    "django_vite",
    "inertia",
    # "storages"
    # User-defined apps
    "core",
    "users",
    "example",
]

MIDDLEWARE = [
    # Django default middleware
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Third-party middleware
    "allauth.account.middleware.AccountMiddleware",
    "inertia.middleware.InertiaMiddleware",
]
APPEND_SLASH = False
ROOT_URLCONF = "global.urls"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "rules.permissions.ObjectPermissionBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR.joinpath("core/templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "global.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASE = {
    "ENGINE": env("DJANGO_APP_DATABASE_ENGINE"),
    "NAME": env("DJANGO_APP_DATABASE_NAME"),
}

if user := env("DJANGO_APP_DATABASE_USER"):
    DATABASE.update({"USER": user})
if password := env("DJANGO_APP_DATABASE_PASSWORD"):
    DATABASE.update({"PASSWORD": password})
if host := env("DJANGO_APP_DATABASE_HOST"):
    DATABASE.update({"HOST": host})
if port := env("DJANGO_APP_DATABASE_PORT"):
    DATABASE.update({"PORT": port})
if max_age := env("DJANGO_CONN_MAX_AGE"):
    DATABASE.update({"CONN_MAX_AGE": max_age})

DATABASES = {"default": DATABASE}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_ROOT = BASE_DIR / "static"
STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "frontend/dist",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django Allauth settings
# https://docs.allauth.org/en/latest/
SITE_ID = 1
HEADLESS_ONLY = True
HEADLESS_FRONTEND_URLS = {}
ACCOUNT_ADAPTER = "users.account_adapter.AccountAdapter"


# Django Vite settings
# https://github.com/MrBin99/django-vite
DJANGO_VITE = {
    "default": {
        "dev_mode": DEBUG,
        "dev_server_port": env.int("DJANGO_APP_VITE_DEV_SERVER_PORT"),
    }
}


# Django Inertia settings
# https://github.com/inertiajs/inertia-django
INERTIA_LAYOUT = "inertia_base.html"
